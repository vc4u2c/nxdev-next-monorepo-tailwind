name: IaC

on:
  workflow_call:
    inputs:
      PROJECT_NAME:
        required: true
        type: string

      PROJECT_CHANGED:
        required: true
        type: boolean

      IAC_CHANGED:
        required: true
        type: boolean

      ENVIRONMENT:
        required: true
        type: string

permissions: write-all

jobs:
  validate:
    name: Validate IaC
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    if: inputs.IAC_CHANGED

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        id: set-environment-variables
        run: |
          PROJECT_NAME="${{ inputs.PROJECT_NAME }}"
          echo $PROJECT_NAME
          PROJECT_NAME_UPPER=$(echo "$PROJECT_NAME" | tr '[:lower:]' '[:upper:]')
          echo "PROJECT_NAME_UPPER=$PROJECT_NAME_UPPER" >> "$GITHUB_ENV"

      - name: Print Settings
        run: |
          echo "PROJECT_NAME_UPPER: ${{ env.PROJECT_NAME_UPPER }}"
          echo "AZURE_CLIENT_ID: ${{ vars[format('AZURE_CLIENT_ID_{0}', env.PROJECT_NAME_UPPER)] }}"
          echo "AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}"
          echo "AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}"
          echo "RESOURCE_GROUP_NAME: ${{ vars[format('AZURE_RESOURCE_GROUP_NAME_{0}', env.PROJECT_NAME_UPPER)] }}"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars[format('AZURE_CLIENT_ID_{0}', env.PROJECT_NAME_UPPER)] }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Run Preflight Validation
        if: inputs.ENVIRONMENT == 'Development'
        uses: azure/arm-deploy@v2
        with:
          resourceGroupName: "${{ vars[format('AZURE_RESOURCE_GROUP_NAME_{0}', env.PROJECT_NAME_UPPER)] }}"
          template: ./.azure/bicep/main.bicep
          parameters: >
            environmentName=${{ inputs.ENVIRONMENT }}
            projectName=${{ inputs.PROJECT_NAME }}
          deploymentMode: Validate
          scope: 'resourcegroup'

      - name: Run What-If
        if: inputs.ENVIRONMENT != 'Development'
        uses: azure/arm-deploy@v2
        with:
          failOnStdErr: false
          resourceGroupName: "${{ vars[format('AZURE_RESOURCE_GROUP_NAME_{0}', env.PROJECT_NAME_UPPER)] }}"
          template: ./.azure/bicep/main.bicep
          parameters: >
            environmentName=${{ inputs.ENVIRONMENT }}
            projectName=${{ inputs.PROJECT_NAME }}
          additionalArguments: --what-if
          scope: 'resourcegroup'

  deploy-iac:
    name: Deploy IaC
    needs: [validate]
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    if: ${{ inputs.IAC_CHANGED }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        id: set-environment-variables
        run: |
          PROJECT_NAME="${{ inputs.PROJECT_NAME }}"
          echo $PROJECT_NAME
          PROJECT_NAME_UPPER=$(echo "$PROJECT_NAME" | tr '[:lower:]' '[:upper:]')
          echo "PROJECT_NAME_UPPER=$PROJECT_NAME_UPPER" >> "$GITHUB_ENV"

      - name: Print Settings
        run: |
          echo "PROJECT_NAME_UPPER: ${{ env.PROJECT_NAME_UPPER }}"
          echo "AZURE_CLIENT_ID: ${{ vars[format('AZURE_CLIENT_ID_{0}', env.PROJECT_NAME_UPPER)] }}"
          echo "AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}"
          echo "AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}"
          echo "RESOURCE_GROUP_NAME: ${{ vars[format('AZURE_RESOURCE_GROUP_NAME_{0}', env.PROJECT_NAME_UPPER)] }}"

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars[format('AZURE_CLIENT_ID_{0}', env.PROJECT_NAME_UPPER)] }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Infrastructure
        uses: azure/arm-deploy@v2
        with:
          failOnStdErr: false
          resourceGroupName: ${{ vars[format('AZURE_RESOURCE_GROUP_NAME_{0}', env.PROJECT_NAME_UPPER)] }}
          template: ./.azure/bicep/main.bicep
          parameters: >
            environmentName=${{ inputs.ENVIRONMENT }}
            projectName=${{ inputs.PROJECT_NAME }}
          scope: 'resourcegroup'

  deploy-swa:
    name: Deploy SWA
    needs: [deploy-iac]
    if: |
      always() &&
      (needs.deploy-iac.result == 'success' || needs.deploy-iac.result == 'skipped') &&
      (inputs.PROJECT_CHANGED)
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        id: set-environment-variables
        run: |
          PROJECT_NAME="${{ inputs.PROJECT_NAME }}"
          echo $PROJECT_NAME
          PROJECT_NAME_UPPER=$(echo "$PROJECT_NAME" | tr '[:lower:]' '[:upper:]')
          echo "PROJECT_NAME_UPPER=$PROJECT_NAME_UPPER" >> "$GITHUB_ENV"
          ENVIRONMENT="${{ inputs.ENVIRONMENT }}"
          if [[ $ENVIRONMENT == *"Development"* ]]; then
            ENV_ABBR="dev"
          elif [[ $ENVIRONMENT == *"QA"* ]]; then
            ENV_ABBR="qa"
          else
            ENV_ABBR="prd"
          fi
          echo "ENV_ABBR=$ENV_ABBR" >> "$GITHUB_ENV"

      - name: Print Settings
        run: |
          echo "PROJECT_NAME_UPPER: ${{ env.PROJECT_NAME_UPPER }}"
          echo "ENV_ABBR: ${{ env.ENV_ABBR }}"
          echo "AZURE_CLIENT_ID: ${{ vars[format('AZURE_CLIENT_ID_{0}', env.PROJECT_NAME_UPPER)] }}"
          echo "AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}"
          echo "AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}"
          echo "RESOURCE_GROUP_NAME: ${{ vars[format('AZURE_RESOURCE_GROUP_NAME_{0}', env.PROJECT_NAME_UPPER)] }}"

      - name: Download artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          name: dist
          run_id: ${{ github.event.workflow_run.workflow.workflow_run.workflow.id }}
          path: ${{ github.workspace }}/dist

      - name: Display structure of downloaded files
        run: ls -la ${{ github.workspace }}/dist

      - uses: azure/login@v2
        name: Login to Azure
        with:
          client-id: ${{ vars[format('AZURE_CLIENT_ID_{0}', env.PROJECT_NAME_UPPER)] }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Get SWA deployment token
        uses: azure/CLI@v1
        id: swa-token
        with:
          inlineScript: |
            SWA_DEPLOYMENT_TOKEN=$(az staticwebapp secrets list -n swa-${{ inputs.PROJECT_NAME }}-${{ env.ENV_ABBR }} -o tsv --query properties.apiKey)
            echo "::add-mask::$SWA_DEPLOYMENT_TOKEN"
            echo SWA_DEPLOYMENT_TOKEN=$SWA_DEPLOYMENT_TOKEN >> $GITHUB_ENV

      - name: Deploy SWA
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.SWA_DEPLOYMENT_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: 'upload'
          skip_app_build: true
          app_location: ${{ github.workspace }}/dist/apps/${{ inputs.PROJECT_NAME }}/.next
        #   output_location: ${{ github.workspace }}/dist/apps/${{ inputs.PROJECT_NAME }}/.next
        # env:
        #   is_static_export: true
